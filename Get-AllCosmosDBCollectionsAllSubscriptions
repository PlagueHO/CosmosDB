function Get-AllCosmosDBCollectionsAllSubscriptions 
{<#  
 .SYNOPSIS  
     Lists all CosmosDB collections in every resource group and subscription of your Azure tennant  
 .DESCRIPTION  
     Provides detailed nformation about each collection and ties nicely together collection name, database name, offers, 
     and size of documents.
 .NOTES  
     FunctionName: Get-AllCosmosDBCollectionsAllSubscriptions  
     Author      : Dustin Brown - dbsaysitall@outlook.com  
     Version     : Tested in Powershell 5

 #>
 #Required Modules and authentication
 #Install-Module cosmosdb -Force 
 #import-Module  cosmosdb -Force
 #login-azurermaccount
 
 #Get a list of all subscriptions in your tennant. This list will be used to loop through each collection in every subscription
 $Subscriptions = Get-azurermsubscription 
 foreach ($Subscription in $Subscriptions)
 {#Select current subscription context
  Select-AzureRmSubscription -SubscriptionId  $Subscription.Id
  $Env = $Subscription.name
  #Get a list of all cosmos accounts and related information
  $CosmosDBAccounts = Get-AzureRmResourceGroup | % {Get-AzureRmResource -ResourceType "Microsoft.DocumentDB/databaseAccounts" -ResourceGroupName $_.ResourceGroupName} | % {get-AzureRmResource -resourcetype $_.ResourceType -resourcegroupname $_.ResourceGroupName -name $_.name}
  
  #loop through each account
  foreach ($Account in $CosmosDBAccounts) 
  {#set current cosmos collection to 
   $Context       = New-CosmosDbContext -Account $Account.name  -ResourceGroup $account.ResourceGroupName | select * 
   #Gather Database Names for selected account 
   $DatabaseNames = Get-CosmosDbDatabase -Context $Context | select * 
   #Aquire offer content. This is also used to get a list of collections in the current account and database
   $Content       = Get-CosmosDBOffer  -Context $Context | select *
  
   #Collect Collection Information and place all info into custom object
   $DBAll= @()
   foreach ($item in $content)
   {#Grab the database identifier
    $FirstElement = $item.resource.split('/')[+1]
    $CurrentDBContext = 'dbs/' + $FirstElement + '/'
    $Throughput = $item.content.offerthroughput
    $Endpoint   = $Account.properties.documentEndpoint

    #Associate correct database name to current databaseID
    $RealName  = $databasenames | ? { $_._self   -match  $CurrentDBContext}
    $Collections = Get-CosmosDbCollection -Context $Context -Database $RealName.id | select *
    #Associate correct collection name to current collection
    $LastConnection = $Collections | ? {$item.resource -eq $_._self} 
   
    #Get Collection Size of each collection. Partition key must exist on collection or get-cosmosdbcollectionsize will not work
    Try
    {$CollectionSize = Get-CosmosDBCollectionSize -Context $Context -Id $LastConnection.id -Database $RealName.id}
    Catch
    {$CollectionSize = @{CollectionSize = "Unknown, No Partition Key";   documentsSize = "Unknown, No Partition Key"; DocumentsCount = "Unknown, No Partition Key"}} 
   
    $DBSome = [PSCustomObject]@{
    Subscription             = $Env
    AccountName              = $Account.Name      
    ResourceGroupName        = $Account.ResourceGroupName 
    Endpoint                 = $Endpoint   
    DatabaseName             = $RealName.id
    CollectionName           = $LastConnection.id
    CollectionRid            = $item._rid
    CurrentTier              = $Throughput
    CollectionSize           = $CollectionSize.collectionSize
    documentSize             = $CollectionSize.documentssize
    DocumentCount            = $CollectionSize.documentsCount
                               }
    $DBSome 
    $DBAll += $DBSome 
   }
  }
 }
}
