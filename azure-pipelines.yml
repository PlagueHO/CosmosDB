name: $(rev:r)
trigger:
  branches:
    include:
    - '*'
pr:
  branches:
    include:
    - dev
jobs:
  - job: Build_PS_Win2016
    displayName: 'Test Powershell 5.1 on Windows Server 2016'
    pool:
      vmImage: vs2017-win2016

    steps:
    - checkout: self
      persistCredentials: true

    - powershell: |
        .\psake.ps1 -TaskList Build -Verbose
      displayName: 'Build and Stage Module'
      env:
        githubRepoToken: $(githubRepoToken)

    - powershell: |
        .\psake.ps1 -TaskList UnitTest -Verbose
      displayName: 'Execute Unit Tests'

    - task: PublishTestResults@2
      displayName: 'Publish Unit Test Results'
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/Unit/TestResults.unit.xml'
        testRunTitle: 'PS_Win2016_Unit'
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish Unit Test Code Coverage'
      inputs:
        summaryFileLocation: '**/Unit/CodeCoverage.xml'
        failIfCoverageEmpty: true
      condition: and(in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed'), eq(variables['System.PullRequest.IsFork'], false))

    - powershell: |
        .\psake.ps1 -TaskList IntegrationTest -Parameters @{ TestStagedModule = $true } -Verbose
      displayName: 'Execute Integration Tests on Staged Module'
      env:
        azureApplicationId: $(azureApplicationId)
        azureApplicationPassword: $(azureApplicationPassword)
        azureSubscriptionId: $(azureSubscriptionId)
        azureTenantId: $(azureTenantId)

    - task: PublishTestResults@2
      displayName: 'Publish Integration Test Results'
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/Integration/TestResults.integration.xml'
        testRunTitle: 'PS_Win2016_Integration'
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Module'
      inputs:
        pathtoPublish: 'staging/CosmosDB'
        artifactName: 'CosmosDB'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Module Zip'
      inputs:
        pathtoPublish: 'staging/zip'
        artifactName: 'zip'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish PSake File'
      inputs:
        pathtoPublish: 'psakefile.ps1'
        artifactName: 'scripts'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish PSDepend File'
      inputs:
        pathtoPublish: 'requirements.psd1'
        artifactName: 'scripts'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build File'
      inputs:
        pathtoPublish: 'psake.ps1'
        artifactName: 'scripts'

  - job: Build_PSCore6_Ubuntu1604
    displayName: 'Test Powershell Core 6 on Ubuntu 16.04'
    pool:
      vmImage: ubuntu-16.04

    steps:
    - script: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list
        sudo apt-get update
        sudo apt-get install -y --allow-downgrades powershell=6.2.3-1.ubuntu.16.04
      displayName: 'Install PowerShell Core 6'

    - script: |
        pwsh -c '.\psake.ps1 -TaskList UnitTest -Verbose'
      displayName: 'Execute Unit Tests'

    - task: PublishTestResults@2
      displayName: 'Publish Unit Test Results'
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/Unit/TestResults.unit.xml'
        testRunTitle: 'PSCore6_Ubuntu1604_Unit'
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

    - script: |
        pwsh -c '.\psake.ps1 -TaskList IntegrationTest -Verbose'
      displayName: 'Execute Integration Tests'
      env:
        azureApplicationId: $(azureApplicationId)
        azureApplicationPassword: $(azureApplicationPassword)
        azureSubscriptionId: $(azureSubscriptionId)
        azureTenantId: $(azureTenantId)

    - task: PublishTestResults@2
      displayName: 'Publish Integration Test Results'
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/Integration/TestResults.integration.xml'
        testRunTitle: 'PSCore6_Ubuntu1604_Integration'
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

  - job: Build_PS7_Ubuntu1604
    displayName: 'Test Powershell 7 on Ubuntu 16.04'
    pool:
      vmImage: ubuntu-16.04

    steps:
    - script: |
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/16.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft.list
        sudo apt-get update
        sudo apt-get install -y powershell
      displayName: 'Install PowerShell 7'

    - script: |
        pwsh -c '.\psake.ps1 -TaskList UnitTest -Verbose'
      displayName: 'Execute Unit Tests'

    - task: PublishTestResults@2
      displayName: 'Publish Unit Test Results'
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/Unit/TestResults.unit.xml'
        testRunTitle: 'PSCore7_Ubuntu1604_Unit'
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

    - script: |
        pwsh -c '.\psake.ps1 -TaskList IntegrationTest -Verbose'
      displayName: 'Execute Integration Tests'
      env:
        azureApplicationId: $(azureApplicationId)
        azureApplicationPassword: $(azureApplicationPassword)
        azureSubscriptionId: $(azureSubscriptionId)
        azureTenantId: $(azureTenantId)

    - task: PublishTestResults@2
      displayName: 'Publish Integration Test Results'
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/Integration/TestResults.integration.xml'
        testRunTitle: 'PSCore7_Ubuntu1604_Integration'
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

  - job: Build_PSCore6_MacOS1014
    displayName: 'Test Powershell Core 6 on MacOS 10.14'
    pool:
      vmImage: macos-10.14

    steps:
    - powershell: |
        Uninstall-Module -Name Az -Force
        .\psake.ps1 -TaskList UnitTest -Verbose
      displayName: 'Execute Unit Tests'

    - task: PublishTestResults@2
      displayName: 'Publish Unit Test Results'
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/TestResults.unit.xml'
        testRunTitle: 'PSCore_MacOS1013_Unit'
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

    - powershell: |
        $null = Remove-Item -Path '~/.Azure' -Recurse -Force
        .\psake.ps1 -TaskList IntegrationTest -Verbose
      displayName: 'Execute Integration Tests'
      env:
        azureApplicationId: $(azureApplicationId)
        azureApplicationPassword: $(azureApplicationPassword)
        azureSubscriptionId: $(azureSubscriptionId)
        azureTenantId: $(azureTenantId)

    - task: PublishTestResults@2
      displayName: 'Publish Integration Test Results'
      inputs:
        testRunner: 'NUnit'
        testResultsFiles: '**/TestResults.integration.xml'
        testRunTitle: 'PSCore_MacOS1013_Integration'
      condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')
