name: $(rev:r)
trigger:
  branches:
    include:
    - '*'
  paths:
    include:
    - source/*
    - tests/*
    - docs/*
    - RequiredModules.psd1
  tags:
    include:
    - "v*"
    exclude:
    - "*-*"

variables:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  testArtifactName: testResults
  sourceFolderName: source

stages:
  - stage: Build
    jobs:
      - job: Package_Module
        displayName: 'Package Module'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - pwsh: |
              dotnet tool install --global GitVersion.Tool --version 5.*
              $gitVersionObject = dotnet-gitversion | ConvertFrom-Json
              $gitVersionObject.PSObject.Properties.ForEach{
                  Write-Host -Object "Setting Task Variable '$($_.Name)' with value '$($_.Value)'."
                  Write-Host -Object "##vso[task.setvariable variable=$($_.Name);]$($_.Value)"
              }
              Write-Host -Object "##vso[build.updatebuildnumber]$($gitVersionObject.FullSemVer)"
            displayName: Calculate ModuleVersion (GitVersion)

          - task: PowerShell@2
            name: package
            displayName: 'Build & Package Module'
            inputs:
              filePath: './build.ps1'
              arguments: '-ResolveDependency -Tasks pack -Verbose'
              pwsh: true
            env:
              ModuleVersion: $(NuGetVersionV2)

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Pipeline Artifact'
            inputs:
              targetPath: '$(buildFolderName)/'
              artifact: $(buildArtifactName)
              publishLocation: 'pipeline'
              parallel: true

  - stage: Test
    dependsOn: Build
    variables:
      - group: CosmosDB.AzureSP
    jobs:
      # Unit Test Matrix
      - job: Unit_Test_Matrix
        displayName: 'Unit Test Matrix'
        strategy:
          maxParallel: 5
          matrix:
            PS_Win2019:
              vmImage: windows-2019
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 5.1 on Windows Server 2019)'
              pwsh: false
            PS_Win2022:
              vmImage: windows-2022
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 5.1 on Windows Server 2022)'
              pwsh: false
            PS_Win2025:
              vmImage: windows-2025
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 5.1 on Windows Server 2025)'
              pwsh: false
            PS7_Win2019:
              vmImage: windows-2019
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 7 on Windows Server 2019)'
              pwsh: true
            PS7_Win2022:
              vmImage: windows-2022
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 7 on Windows Server 2022)'
              pwsh: true
            PS7_Win2025:
              vmImage: windows-2025
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 7 on Windows Server 2025)'
              pwsh: true
            PS7_Ubuntu2004:
              vmImage: ubuntu-20.04
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 7 on Ubuntu 20.04)'
              pwsh: true
            PS7_Ubuntu2204:
              vmImage: ubuntu-22.04
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 7 on Ubuntu 22.04)'
              pwsh: true
            PS7_Ubuntu2404:
              vmImage: ubuntu-24.04
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 7 on Ubuntu 24.04)'
              pwsh: true
            PS7_MacOS13:
              vmImage: macos-13
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 7 on MacOS 13)'
              pwsh: true
            PS7_MacOS14:
              vmImage: macos-14
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 7 on MacOS 14)'
              pwsh: true
            PS7_MacOS15:
              vmImage: macos-15
              pesterScript: 'tests/Unit'
              testRunTitle: 'Unit (PowerShell 7 on MacOS 15)'
              pwsh: true

        pool:
          vmImage: $(vmImage)
        steps:
          - powershell: |
              $repositoryOwner,$repositoryName = $env:BUILD_REPOSITORY_NAME -split '/'
              echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
              echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
            name: moduleBuildVariable
            displayName: 'Set Environment Variables'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'

          - task: PowerShell@2
            name: test
            displayName: 'Run Unit Test'
            inputs:
              filePath: './build.ps1'
              arguments: "-tasks test -PesterScript '$(pesterScript)'"
              pwsh: $(pwsh)

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: '$(testRunTitle)'

          - task: PublishCodeCoverageResults@2
            displayName: 'Publish Code Coverage'
            condition: succeededOrFailed()
            inputs:
              summaryFileLocation: '$(Build.SourcesDirectory)/$(buildFolderName)/$(testResultFolderName)/CodeCov*.xml'
              pathToSources: '$(Build.SourcesDirectory)/$(sourceFolderName)/'

      # Integration Test Matrix
      - job: Integration_Test_Matrix
        displayName: 'Integration Test Matrix'
        dependsOn: Unit_Test_Matrix
        strategy:
          maxParallel: 5
          matrix:
            PS_Win2019:
              vmImage: windows-2019
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 5.1 on Windows Server 2019)'
              pwsh: false
            PS_Win2022:
              vmImage: windows-2022
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 5.1 on Windows Server 2022)'
              pwsh: false
            PS_Win2025:
              vmImage: windows-2025
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 5.1 on Windows Server 2025)'
              pwsh: false
            PS7_Win2019:
              vmImage: windows-2019
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 7 on Windows Server 2019)'
              pwsh: true
            PS7_Win2022:
              vmImage: windows-2022
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 7 on Windows Server 2022)'
              pwsh: true
            PS7_Win2025:
              vmImage: windows-2025
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 7 on Windows Server 2025)'
              pwsh: true
            PS7_Ubuntu2004:
              vmImage: ubuntu-20.04
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 7 on Ubuntu 20.04)'
              pwsh: true
            PS7_Ubuntu2204:
              vmImage: ubuntu-22.04
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 7 on Ubuntu 22.04)'
              pwsh: true
            PS7_Ubuntu2404:
              vmImage: ubuntu-24.04
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 7 on Ubuntu 24.04)'
              pwsh: true
            PS7_MacOS13:
              vmImage: macos-13
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 7 on MacOS 13)'
              pwsh: true
            PS7_MacOS14:
              vmImage: macos-14
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 7 on MacOS 14)'
              pwsh: true
            PS7_MacOS15:
              vmImage: macos-15
              pesterScript: 'tests/Integration'
              testRunTitle: 'Integration (PowerShell 7 on MacOS 15)'
              pwsh: true

        pool:
          vmImage: $(vmImage)
        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'

          - task: PowerShell@2
            name: test
            displayName: 'Run Integration Test'
            env:
              azureApplicationId: $(azureApplicationId)
              azureApplicationPassword: $(azureApplicationPassword)
              azureSubscriptionId: $(azureSubscriptionId)
              azureTenantId: $(azureTenantId)
              azureAppicationObjectId: $(azureAppicationObjectId)
            inputs:
              filePath: './build.ps1'
              arguments: "-Tasks test -PesterScript '$(pesterScript)' -CodeCoverageThreshold 0"
              pwsh: $(pwsh)

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'NUnit'
              testResultsFiles: '$(buildFolderName)/$(testResultFolderName)/NUnit*.xml'
              testRunTitle: '$(testRunTitle)'

  - stage: Deploy
    dependsOn: Test
    # Only execute deploy stage if we're on main and previous stage succeeded
    condition: |
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/main'),
          startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        ),
        eq(variables['System.TeamFoundationCollectionUri'], 'https://dev.azure.com/dscottraynsford/'),
        endsWith(variables['Build.DefinitionName'],'main')
      )
    jobs:
      - job: Deploy_Module
        displayName: 'Deploy Module'
        pool:
          vmImage: ubuntu-latest

        steps:
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Pipeline Artifact'
            inputs:
              buildType: 'current'
              artifactName: $(buildArtifactName)
              targetPath: '$(Build.SourcesDirectory)/$(buildArtifactName)'

          - task: PowerShell@2
            name: publish_release
            displayName: 'Publish Release'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks publish'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              GalleryApiToken: $(GalleryApiToken)
              ReleaseBranch: main
              MainGitBranch: main

          - task: PowerShell@2
            name: send_changelog_PR
            displayName: 'Send CHANGELOG PR'
            inputs:
              filePath: './build.ps1'
              arguments: '-tasks Create_ChangeLog_GitHub_PR'
              pwsh: true
            env:
              GitHubToken: $(GitHubToken)
              MainGitBranch: main
