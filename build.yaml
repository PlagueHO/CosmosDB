---
####################################################
#          ModuleBuilder Configuration             #
####################################################
CopyPaths:
  - classes
  - formats
  - en-US
  - types
prefix: prefix.ps1
suffix: suffix.ps1
Encoding: UTF8
VersionedOutputDirectory: true


####################################################
#       Sampler Pipeline Configuration             #
####################################################
BuildWorkflow:
  Compile_Classes: |
    {
      $classesPath = Join-Path -Path $BuildRoot -ChildPath 'source/classes/CosmosDB'
      $classesProjectPath = Join-Path -Path $classesPath -ChildPath 'CosmosDB.csproj'
      & dotnet @('build',$classesProjectPath,'/p:Configuration=Release')
      $compiledDllPath = Join-Path -Path $classesPath -ChildPath 'bin/Release/netstandard2.0/CosmosDB.dll'

      if ([System.String]::IsNullOrEmpty($ENV:ModuleVersion))
      {
        Write-Host -Object 'ModuleVersion environment variable is not defined.'
        $moduleVersion = ($BuildModuleOutput | Join-Path -ChildPath 'CosmosDB' | Get-ChildItem -Attributes D | Sort-Object -Property Name)[0].Name
      }
      else
      {
        $moduleVersion = (($ENV:ModuleVersion -Split '-') -Split '\+')[0]
      }

      Write-Host -Object "Compiling Classes for version $moduleVersion."

      $destinationPath = $BuildModuleOutput | Join-Path -ChildPath 'CosmosDB' | Join-Path -ChildPath $moduleVersion
      $null = Copy-Item -Path $compiledDllPath -Destination $destinationPath
    }

  Compile_Help: |
    {
      <#
        Execute in a separate PWSH session because platyPS tries
        to load YamlDotNet.dll which conflicts with one loaded by
        Module-Builder.
      #>
      if ([System.String]::IsNullOrEmpty($ENV:ModuleVersion))
      {
        Write-Host -Object 'ModuleVersion environment variable is not defined.'
        $moduleVersion = ($BuildModuleOutput | Join-Path -ChildPath 'CosmosDB' | Get-ChildItem -Attributes D | Sort-Object -Property Name)[0].Name
      }
      else
      {
        $moduleVersion = (($ENV:ModuleVersion -Split '-') -Split '\+')[0]
      }

      Write-Host -Object "Compiling help for version $moduleVersion."

      $outputPath = "$BuildModuleOutput\CosmosDB\$moduleVersion"
      $execute = "New-ExternalHelp -Path '$BuildRoot\docs' -OutputPath '$outputPath' -Force"

      if ($IsCoreCLR)
      {
        $PowerShellExe = 'pwsh'
      }
      else
      {
        $PowerShellExe = 'powershell'
      }

      & $PowerShellExe -Command "`"$execute`""
    }

  '.':
    - build
    - test

  build:
    - Clean
    - Build_Module_ModuleBuilder
    - Build_NestedModules_ModuleBuilder
    - Compile_Classes
    - Create_changelog_release_output
    - Compile_Help

  pack:
    - build
    - package_module_nupkg

  test:
    - Pester_Tests_Stop_On_Fail
    - Pester_if_Code_Coverage_Under_Threshold

  publish:
    - Publish_Release_To_GitHub
    - Publish_Module_To_gallery


####################################################
#       PESTER  Configuration                      #
####################################################

Pester:
  OutputFormat: NUnitXML
  ExcludeFromCodeCoverage:
  Script:
    - tests/Unit
    - tests/Integration
  ExcludeTag:
  Tag:
  CodeCoverageThreshold: 70

Resolve-Dependency:
  Gallery: 'PSGallery'
  AllowPrerelease: false
  Verbose: false

ModuleBuildTasks:
  Sampler:
    - '*.build.Sampler.ib.tasks'
  Sampler.GitHubTasks:
    - '*.ib.tasks'

TaskHeader: |
  param($Path)
  ""
  "=" * 79
  Write-Build Cyan "`t`t`t$($Task.Name.replace("_"," ").ToUpper())"
  Write-Build DarkGray  "$(Get-BuildSynopsis $Task)"
  "-" * 79
  Write-Build DarkGray "  $Path"
  Write-Build DarkGray "  $($Task.InvocationInfo.ScriptName):$($Task.InvocationInfo.ScriptLineNumber)"
  ""

GitHubConfig:
  GitHubFilesToAdd:
    - 'CHANGELOG.md'
  GitHubConfigUserName: Daniel Scott-Raynsford
  GitHubConfigUserEmail: plagueho@gmail.com
  UpdateChangelogOnPrerelease: false
